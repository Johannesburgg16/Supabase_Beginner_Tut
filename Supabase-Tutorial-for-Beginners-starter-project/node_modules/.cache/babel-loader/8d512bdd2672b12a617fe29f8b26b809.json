{"ast":null,"code":"import { WebSocket } from 'isows';\nimport { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_VERSION, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\n\nconst noop = () => {};\n\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.logLevel Sets the log level for Realtime\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n   */\n  constructor(endPoint, options) {\n    var _a;\n\n    this.accessTokenValue = null;\n    this.apiKey = null;\n    this.channels = new Array();\n    this.endPoint = '';\n    this.httpEndpoint = '';\n    /** @deprecated headers cannot be set on websocket connections */\n\n    this.headers = {};\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.heartbeatIntervalMs = 25000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.heartbeatCallback = noop;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.accessToken = null;\n    /**\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\n     *\n     * @internal\n     */\n\n    this._resolveFetch = customFetch => {\n      let _fetch;\n\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        _fetch = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return import('@supabase/node-fetch').then(_ref => {\n            let {\n              default: fetch\n            } = _ref;\n            return fetch(...args);\n          });\n        };\n      } else {\n        _fetch = fetch;\n      }\n\n      return function () {\n        return _fetch(...arguments);\n      };\n    };\n\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    this.httpEndpoint = httpEndpointURL(endPoint);\n\n    if (options === null || options === void 0 ? void 0 : options.transport) {\n      this.transport = options.transport;\n    } else {\n      this.transport = null;\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n\n    if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n      this.logLevel = options.logLevel || options.log_level;\n      this.params = Object.assign(Object.assign({}, this.params), {\n        log_level: this.logLevel\n      });\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const accessTokenValue = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n\n    if (accessTokenValue) {\n      this.accessTokenValue = accessTokenValue;\n      this.apiKey = accessTokenValue;\n    }\n\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect();\n      this.connect();\n    }, this.reconnectAfterMs);\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n\n    if (options === null || options === void 0 ? void 0 : options.worker) {\n      if (typeof window !== 'undefined' && !window.Worker) {\n        throw new Error('Web Worker is not supported');\n      }\n\n      this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;\n      this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n    }\n\n    this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n\n\n  connect() {\n    if (this.conn) {\n      return;\n    }\n\n    if (!this.transport) {\n      this.transport = WebSocket;\n    }\n\n    if (!this.transport) {\n      throw new Error('No transport provided');\n    }\n\n    this.conn = new this.transport(this.endpointURL());\n    this.setupConnection();\n  }\n  /**\n   * Returns the URL of the websocket.\n   * @returns string The URL of the websocket.\n   */\n\n\n  endpointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n\n\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n\n\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n\n      this.conn = null; // remove open handles\n\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n      this.channels.forEach(channel => channel.teardown());\n    }\n  }\n  /**\n   * Returns all created channels\n   */\n\n\n  getChannels() {\n    return this.channels;\n  }\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n\n\n  async removeChannel(channel) {\n    const status = await channel.unsubscribe();\n\n    if (this.channels.length === 0) {\n      this.disconnect();\n    }\n\n    return status;\n  }\n  /**\n   * Unsubscribes and removes all channels\n   */\n\n\n  async removeAllChannels() {\n    const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n    this.channels = [];\n    this.disconnect();\n    return values_1;\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Returns `true` is the connection is open.\n   */\n\n\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n\n  channel(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    const realtimeTopic = `realtime:${topic}`;\n    const exists = this.getChannels().find(c => c.topic === realtimeTopic);\n\n    if (!exists) {\n      const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n      this.channels.push(chan);\n      return chan;\n    } else {\n      return exists;\n    }\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n\n\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * If param is null it will use the `accessToken` callback function or the token set on the client.\n   *\n   * On callback used, it will set the value of the token internal to the client.\n   *\n   * @param token A JWT string to override the token set on the client.\n   */\n\n\n  async setAuth() {\n    let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let tokenToSend = token || this.accessToken && (await this.accessToken()) || this.accessTokenValue;\n\n    if (this.accessTokenValue != tokenToSend) {\n      this.accessTokenValue = tokenToSend;\n      this.channels.forEach(channel => {\n        const payload = {\n          access_token: tokenToSend,\n          version: DEFAULT_VERSION\n        };\n        tokenToSend && channel.updateJoinPayload(payload);\n\n        if (channel.joinedOnce && channel._isJoined()) {\n          channel._push(CHANNEL_EVENTS.access_token, {\n            access_token: tokenToSend\n          });\n        }\n      });\n    }\n  }\n  /**\n   * Sends a heartbeat message if the socket is connected.\n   */\n\n\n  async sendHeartbeat() {\n    var _a;\n\n    if (!this.isConnected()) {\n      this.heartbeatCallback('disconnected');\n      return;\n    }\n\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      this.heartbeatCallback('timeout');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.heartbeatCallback('sent');\n    await this.setAuth();\n  }\n\n  onHeartbeat(callback) {\n    this.heartbeatCallback = callback;\n  }\n  /**\n   * Flushes send buffer\n   */\n\n\n  flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n\n\n  _makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n\n\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n\n\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c.topic !== channel.topic);\n  }\n  /**\n   * Sets up connection handlers.\n   *\n   * @internal\n   */\n\n\n  setupConnection() {\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n\n      this.conn.onopen = () => this._onConnOpen();\n\n      this.conn.onerror = error => this._onConnError(error);\n\n      this.conn.onmessage = event => this._onConnMessage(event);\n\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /** @internal */\n\n\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n\n      if (topic === 'phoenix' && event === 'phx_reply') {\n        this.heartbeatCallback(msg.payload.status == 'ok' ? 'ok' : 'error');\n      }\n\n      if (ref && ref === this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n      }\n\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      Array.from(this.channels).filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n\n\n  _onConnOpen() {\n    this.log('transport', `connected to ${this.endpointURL()}`);\n    this.flushSendBuffer();\n    this.reconnectTimer.reset();\n\n    if (!this.worker) {\n      this._startHeartbeat();\n    } else {\n      if (!this.workerRef) {\n        this._startWorkerHeartbeat();\n      }\n    }\n\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n\n\n  _startHeartbeat() {\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n  }\n  /** @internal */\n\n\n  _startWorkerHeartbeat() {\n    if (this.workerUrl) {\n      this.log('worker', `starting worker for from ${this.workerUrl}`);\n    } else {\n      this.log('worker', `starting default worker`);\n    }\n\n    const objectUrl = this._workerObjectUrl(this.workerUrl);\n\n    this.workerRef = new Worker(objectUrl);\n\n    this.workerRef.onerror = error => {\n      this.log('worker', 'worker error', error.message);\n      this.workerRef.terminate();\n    };\n\n    this.workerRef.onmessage = event => {\n      if (event.data.event === 'keepAlive') {\n        this.sendHeartbeat();\n      }\n    };\n\n    this.workerRef.postMessage({\n      event: 'start',\n      interval: this.heartbeatIntervalMs\n    });\n  }\n  /** @internal */\n\n\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n\n    this._triggerChanError();\n\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n\n\n  _onConnError(error) {\n    this.log('transport', `${error}`);\n\n    this._triggerChanError();\n\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n\n\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n\n\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n\n  _workerObjectUrl(url) {\n    let result_url;\n\n    if (url) {\n      result_url = url;\n    } else {\n      const blob = new Blob([WORKER_SCRIPT], {\n        type: 'application/javascript'\n      });\n      result_url = URL.createObjectURL(blob);\n    }\n\n    return result_url;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SACEC,cADF,EAEEC,gBAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,GAPF,EAQEC,eARF,QASO,iBATP;AAWA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AA6BA,MAAMC,IAAI,GAAG,MAAK,CAAG,CAArB;;AAoCA,MAAMC,aAAa,GAAG;;;;;MAAtB;AAOA,eAAc,MAAOC,cAAP,CAAqB;EA0CjC;;;;;;;;;;;;;;;;;;EAkBAC,YAAYC,QAAZ,EAA8BC,OAA9B,EAA6D;;;IA3D7D,wBAAkC,IAAlC;IACA,cAAwB,IAAxB;IACA,gBAA8B,IAAIC,KAAJ,EAA9B;IACA,gBAAmB,EAAnB;IACA,oBAAuB,EAAvB;IACA;;IACA,eAAsC,EAAtC;IACA,cAAqC,EAArC;IACA,eAAkBf,eAAlB;IAEA,2BAA8B,KAA9B;IACA,sBAA6DgB,SAA7D;IACA,2BAAqC,IAArC;IACA,yBAAuDP,IAAvD;IACA,WAAc,CAAd;IAEA,cAAmBA,IAAnB;IAKA,YAA6B,IAA7B;IACA,kBAAyB,EAAzB;IACA,kBAAyB,IAAIJ,UAAJ,EAAzB;IACA,4BAKI;MACFY,IAAI,EAAE,EADJ;MAEFC,KAAK,EAAE,EAFL;MAGFC,KAAK,EAAE,EAHL;MAIFC,OAAO,EAAE;IAJP,CALJ;IAYA,mBAAqD,IAArD;IAqTA;;;;;;IAKA,qBAAiBC,WAAD,IAA+B;MAC7C,IAAIC,MAAJ;;MACA,IAAID,WAAJ,EAAiB;QACfC,MAAM,GAAGD,WAAT;MACD,CAFD,MAEO,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;QACvCD,MAAM,GAAG;UAAA,kCAAIE,IAAJ;YAAIA,IAAJ;UAAA;;UAAA,OACP,OAAO,sBAAP,EAAsCC,IAAtC,CAA2C;YAAA,IAAC;cAAEC,OAAO,EAAEH;YAAX,CAAD;YAAA,OACzCA,KAAK,CAAC,GAAGC,IAAJ,CADoC;UAAA,CAA3C,CADO;QAAA,CAAT;MAID,CALM,MAKA;QACLF,MAAM,GAAGC,KAAT;MACD;;MACD,OAAO;QAAA,OAAaD,MAAM,CAAC,YAAD,CAAnB;MAAA,CAAP;IACD,CAbD;;IAlSE,KAAKT,QAAL,GAAgB,GAAGA,QAAQ,IAAIX,UAAU,CAACyB,SAAS,EAAnD;IACA,KAAKC,YAAL,GAAoBrB,eAAe,CAACM,QAAD,CAAnC;;IACA,IAAIC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEe,SAAb,EAAwB;MACtB,KAAKA,SAAL,GAAiBf,OAAO,CAACe,SAAzB;IACD,CAFD,MAEO;MACL,KAAKA,SAAL,GAAiB,IAAjB;IACD;;IACD,IAAIf,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEgB,MAAb,EAAqB,KAAKA,MAAL,GAAchB,OAAO,CAACgB,MAAtB;IACrB,IAAIhB,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEiB,OAAb,EAAsB,KAAKA,OAAL,GAAejB,OAAO,CAACiB,OAAvB;IACtB,IAAIjB,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEkB,MAAb,EAAqB,KAAKA,MAAL,GAAclB,OAAO,CAACkB,MAAtB;;IACrB,IAAI,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,QAAT,MAAqBnB,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEoB,SAA9B,CAAJ,EAA6C;MAC3C,KAAKD,QAAL,GAAgBnB,OAAO,CAACmB,QAAR,IAAoBnB,OAAO,CAACoB,SAA5C;MACA,KAAKJ,MAAL,GAAWK,gCAAQ,KAAKL,MAAb,GAAmB;QAAEI,SAAS,EAAE,KAAKD;MAAlB,CAAnB,CAAX;IACD;;IAED,IAAInB,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEsB,mBAAb,EACE,KAAKA,mBAAL,GAA2BtB,OAAO,CAACsB,mBAAnC;IAEF,MAAMC,gBAAgB,GAAG,aAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEP,MAAT,MAAe,IAAf,IAAeQ,aAAf,GAAe,MAAf,GAAeA,GAAEC,MAA1C;;IACA,IAAIF,gBAAJ,EAAsB;MACpB,KAAKA,gBAAL,GAAwBA,gBAAxB;MACA,KAAKG,MAAL,GAAcH,gBAAd;IACD;;IAED,KAAKI,gBAAL,GAAwB,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,gBAAT,IACpB3B,OAAO,CAAC2B,gBADY,GAEnBC,KAAD,IAAkB;MAChB,OAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,EAA0BA,KAAK,GAAG,CAAlC,KAAwC,KAA/C;IACD,CAJL;IAKA,KAAKC,MAAL,GAAc,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,IACV7B,OAAO,CAAC6B,MADE,GAEV,CAACC,OAAD,EAAgBC,QAAhB,KAAsC;MACpC,OAAOA,QAAQ,CAACC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAD,CAAf;IACD,CAJL;IAKA,KAAKI,MAAL,GAAc,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,IACVlC,OAAO,CAACkC,MADE,GAEV,KAAKC,UAAL,CAAgBD,MAAhB,CAAuBE,IAAvB,CAA4B,KAAKD,UAAjC,CAFJ;IAGA,KAAKE,cAAL,GAAsB,IAAI7C,KAAJ,CAAU,YAAW;MACzC,KAAK8C,UAAL;MACA,KAAKC,OAAL;IACD,CAHqB,EAGnB,KAAKZ,gBAHc,CAAtB;IAKA,KAAKlB,KAAL,GAAa,KAAK+B,aAAL,CAAmBxC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAES,KAA5B,CAAb;;IACA,IAAIT,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEyC,MAAb,EAAqB;MACnB,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAACA,MAAM,CAACC,MAA7C,EAAqD;QACnD,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;MACD;;MACD,KAAKH,MAAL,GAAc,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,KAAmB,KAAjC;MACA,KAAKI,SAAL,GAAiB7C,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE6C,SAA1B;IACD;;IACD,KAAKC,WAAL,GAAmB,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,WAAT,KAAwB,IAA3C;EACD;EAED;;;;;EAGAP,OAAO;IACL,IAAI,KAAKQ,IAAT,EAAe;MACb;IACD;;IACD,IAAI,CAAC,KAAKhC,SAAV,EAAqB;MACnB,KAAKA,SAAL,GAAiBjC,SAAjB;IACD;;IACD,IAAI,CAAC,KAAKiC,SAAV,EAAqB;MACnB,MAAM,IAAI6B,KAAJ,CAAU,uBAAV,CAAN;IACD;;IACD,KAAKG,IAAL,GAAY,IAAI,KAAKhC,SAAT,CAAmB,KAAKiC,WAAL,EAAnB,CAAZ;IACA,KAAKC,eAAL;EACD;EAED;;;;;;EAIAD,WAAW;IACT,OAAO,KAAKE,aAAL,CACL,KAAKnD,QADA,EAELsB,MAAM,CAAC8B,MAAP,CAAc,EAAd,EAAkB,KAAKnC,MAAvB,EAA+B;MAAEoC,GAAG,EAAE/D;IAAP,CAA/B,CAFK,CAAP;EAID;EAED;;;;;;;;EAMAiD,UAAU,CAACe,IAAD,EAAgBC,MAAhB,EAA+B;IACvC,IAAI,KAAKP,IAAT,EAAe;MACb,KAAKA,IAAL,CAAUQ,OAAV,GAAoB,aAAc,CAAlC,CADa,CACsB;;;MACnC,IAAIF,IAAJ,EAAU;QACR,KAAKN,IAAL,CAAU3C,KAAV,CAAgBiD,IAAhB,EAAsBC,MAAM,SAAN,UAAM,WAAN,YAAU,EAAhC;MACD,CAFD,MAEO;QACL,KAAKP,IAAL,CAAU3C,KAAV;MACD;;MACD,KAAK2C,IAAL,GAAY,IAAZ,CAPa,CASb;;MACA,KAAKS,cAAL,IAAuBC,aAAa,CAAC,KAAKD,cAAN,CAApC;MACA,KAAKnB,cAAL,CAAoBqB,KAApB;MACA,KAAKC,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAaA,OAAO,CAACC,QAAR,EAAnC;IACD;EACF;EAED;;;;;EAGAC,WAAW;IACT,OAAO,KAAKJ,QAAZ;EACD;EAED;;;;;;EAImB,MAAbK,aAAa,CACjBH,OADiB,EACO;IAExB,MAAMI,MAAM,GAAG,MAAMJ,OAAO,CAACK,WAAR,EAArB;;IAEA,IAAI,KAAKP,QAAL,CAAcQ,MAAd,KAAyB,CAA7B,EAAgC;MAC9B,KAAK7B,UAAL;IACD;;IAED,OAAO2B,MAAP;EACD;EAED;;;;;EAGuB,MAAjBG,iBAAiB;IACrB,MAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CACrB,KAAKZ,QAAL,CAAca,GAAd,CAAmBX,OAAD,IAAaA,OAAO,CAACK,WAAR,EAA/B,CADqB,CAAvB;IAGA,KAAKP,QAAL,GAAgB,EAAhB;IACA,KAAKrB,UAAL;IACA,OAAO+B,QAAP;EACD;EAED;;;;;;;EAKAI,GAAG,CAACC,IAAD,EAAeC,GAAf,EAA4BC,IAA5B,EAAsC;IACvC,KAAK1D,MAAL,CAAYwD,IAAZ,EAAkBC,GAAlB,EAAuBC,IAAvB;EACD;EAED;;;;;EAGAC,eAAe;IACb,QAAQ,KAAK9B,IAAL,IAAa,KAAKA,IAAL,CAAU+B,UAA/B;MACE,KAAK3F,aAAa,CAAC4F,UAAnB;QACE,OAAO/F,gBAAgB,CAACgG,UAAxB;;MACF,KAAK7F,aAAa,CAACgB,IAAnB;QACE,OAAOnB,gBAAgB,CAACiG,IAAxB;;MACF,KAAK9F,aAAa,CAAC+F,OAAnB;QACE,OAAOlG,gBAAgB,CAACmG,OAAxB;;MACF;QACE,OAAOnG,gBAAgB,CAACoG,MAAxB;IARJ;EAUD;EAED;;;;;EAGAC,WAAW;IACT,OAAO,KAAKR,eAAL,OAA2B7F,gBAAgB,CAACiG,IAAnD;EACD;;EAEDpB,OAAO,CACLyB,KADK,EAE0C;IAAA,IAA/CtE,MAA+C,uEAAd;MAAEuE,MAAM,EAAE;IAAV,CAAc;IAE/C,MAAMC,aAAa,GAAG,YAAYF,KAAK,EAAvC;IACA,MAAMG,MAAM,GAAG,KAAK1B,WAAL,GAAmB2B,IAAnB,CACZC,CAAD,IAAwBA,CAAC,CAACL,KAAF,KAAYE,aADvB,CAAf;;IAIA,IAAI,CAACC,MAAL,EAAa;MACX,MAAMG,IAAI,GAAG,IAAIlG,eAAJ,CAAoB,YAAY4F,KAAK,EAArC,EAAyCtE,MAAzC,EAAiD,IAAjD,CAAb;MACA,KAAK2C,QAAL,CAAckC,IAAd,CAAmBD,IAAnB;MAEA,OAAOA,IAAP;IACD,CALD,MAKO;MACL,OAAOH,MAAP;IACD;EACF;EAED;;;;;;;EAKAI,IAAI,CAACjB,IAAD,EAAsB;IACxB,MAAM;MAAEU,KAAF;MAASQ,KAAT;MAAgBhE,OAAhB;MAAyBiE;IAAzB,IAAiCnB,IAAvC;;IACA,MAAM7C,QAAQ,GAAG,MAAK;MACpB,KAAKF,MAAL,CAAY+C,IAAZ,EAAmBoB,MAAD,IAAgB;;;QAChC,WAAKjD,IAAL,MAAS,IAAT,IAASvB,aAAT,GAAS,MAAT,GAASA,GAAEyE,IAAF,CAAOD,MAAP,CAAT;MACD,CAFD;IAGD,CAJD;;IAKA,KAAKvB,GAAL,CAAS,MAAT,EAAiB,GAAGa,KAAK,IAAIQ,KAAK,KAAKC,GAAG,GAA1C,EAA+CjE,OAA/C;;IACA,IAAI,KAAKuD,WAAL,EAAJ,EAAwB;MACtBtD,QAAQ;IACT,CAFD,MAEO;MACL,KAAKmE,UAAL,CAAgBL,IAAhB,CAAqB9D,QAArB;IACD;EACF;EAED;;;;;;;;;;;EASa,MAAPoE,OAAO,GAA4B;IAAA,IAA3BC,KAA2B,uEAAJ,IAAI;IACvC,IAAIC,WAAW,GACbD,KAAK,IACJ,KAAKtD,WAAL,KAAqB,MAAM,KAAKA,WAAL,EAA3B,CADD,IAEA,KAAKvB,gBAHP;;IAKA,IAAI,KAAKA,gBAAL,IAAyB8E,WAA7B,EAA0C;MACxC,KAAK9E,gBAAL,GAAwB8E,WAAxB;MACA,KAAK1C,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAY;QAChC,MAAM/B,OAAO,GAAG;UACdwE,YAAY,EAAED,WADA;UAEdE,OAAO,EAAEtH;QAFK,CAAhB;QAKAoH,WAAW,IAAIxC,OAAO,CAAC2C,iBAAR,CAA0B1E,OAA1B,CAAf;;QAEA,IAAI+B,OAAO,CAAC4C,UAAR,IAAsB5C,OAAO,CAAC6C,SAAR,EAA1B,EAA+C;UAC7C7C,OAAO,CAAC8C,KAAR,CAAc5H,cAAc,CAACuH,YAA7B,EAA2C;YACzCA,YAAY,EAAED;UAD2B,CAA3C;QAGD;MACF,CAbD;IAcD;EACF;EACD;;;;;EAGmB,MAAbO,aAAa;;;IACjB,IAAI,CAAC,KAAKvB,WAAL,EAAL,EAAyB;MACvB,KAAKwB,iBAAL,CAAuB,cAAvB;MACA;IACD;;IACD,IAAI,KAAKC,mBAAT,EAA8B;MAC5B,KAAKA,mBAAL,GAA2B,IAA3B;MACA,KAAKrC,GAAL,CACE,WADF,EAEE,0DAFF;MAIA,KAAKoC,iBAAL,CAAuB,SAAvB;MACA,WAAK9D,IAAL,MAAS,IAAT,IAASvB,aAAT,GAAS,MAAT,GAASA,GAAEpB,KAAF,CAAQd,eAAR,EAAyB,kBAAzB,CAAT;MACA;IACD;;IACD,KAAKwH,mBAAL,GAA2B,KAAKC,QAAL,EAA3B;IACA,KAAKlB,IAAL,CAAU;MACRP,KAAK,EAAE,SADC;MAERQ,KAAK,EAAE,WAFC;MAGRhE,OAAO,EAAE,EAHD;MAIRiE,GAAG,EAAE,KAAKe;IAJF,CAAV;IAMA,KAAKD,iBAAL,CAAuB,MAAvB;IACA,MAAM,KAAKV,OAAL,EAAN;EACD;;EAEDa,WAAW,CAACjF,QAAD,EAA4C;IACrD,KAAK8E,iBAAL,GAAyB9E,QAAzB;EACD;EACD;;;;;EAGAkF,eAAe;IACb,IAAI,KAAK5B,WAAL,MAAsB,KAAKa,UAAL,CAAgB/B,MAAhB,GAAyB,CAAnD,EAAsD;MACpD,KAAK+B,UAAL,CAAgBtC,OAAhB,CAAyB7B,QAAD,IAAcA,QAAQ,EAA9C;MACA,KAAKmE,UAAL,GAAkB,EAAlB;IACD;EACF;EAsBD;;;;;;;EAKAa,QAAQ;IACN,IAAIG,MAAM,GAAG,KAAKnB,GAAL,GAAW,CAAxB;;IACA,IAAImB,MAAM,KAAK,KAAKnB,GAApB,EAAyB;MACvB,KAAKA,GAAL,GAAW,CAAX;IACD,CAFD,MAEO;MACL,KAAKA,GAAL,GAAWmB,MAAX;IACD;;IAED,OAAO,KAAKnB,GAAL,CAASoB,QAAT,EAAP;EACD;EAED;;;;;;;EAKAC,eAAe,CAAC9B,KAAD,EAAc;IAC3B,IAAI+B,UAAU,GAAG,KAAK1D,QAAL,CAAc+B,IAAd,CACdC,CAAD,IAAOA,CAAC,CAACL,KAAF,KAAYA,KAAZ,KAAsBK,CAAC,CAACe,SAAF,MAAiBf,CAAC,CAAC2B,UAAF,EAAvC,CADQ,CAAjB;;IAGA,IAAID,UAAJ,EAAgB;MACd,KAAK5C,GAAL,CAAS,WAAT,EAAsB,4BAA4Ba,KAAK,GAAvD;MACA+B,UAAU,CAACnD,WAAX;IACD;EACF;EAED;;;;;;;;;EAOAqD,OAAO,CAAC1D,OAAD,EAAyB;IAC9B,KAAKF,QAAL,GAAgB,KAAKA,QAAL,CAAc6D,MAAd,CAAsB7B,CAAD,IAAOA,CAAC,CAACL,KAAF,KAAYzB,OAAO,CAACyB,KAAhD,CAAhB;EACD;EAED;;;;;;;EAKQrC,eAAe;IACrB,IAAI,KAAKF,IAAT,EAAe;MACb,KAAKA,IAAL,CAAU0E,UAAV,GAAuB,aAAvB;;MACA,KAAK1E,IAAL,CAAU2E,MAAV,GAAmB,MAAM,KAAKC,WAAL,EAAzB;;MACA,KAAK5E,IAAL,CAAU6E,OAAV,GAAqBvH,KAAD,IAAkB,KAAKwH,YAAL,CAAkBxH,KAAlB,CAAtC;;MACA,KAAK0C,IAAL,CAAU+E,SAAV,GAAuBhC,KAAD,IAAgB,KAAKiC,cAAL,CAAoBjC,KAApB,CAAtC;;MACA,KAAK/C,IAAL,CAAUQ,OAAV,GAAqBuC,KAAD,IAAgB,KAAKkC,YAAL,CAAkBlC,KAAlB,CAApC;IACD;EACF;EAED;;;EACQiC,cAAc,CAACE,UAAD,EAA0B;IAC9C,KAAK/F,MAAL,CAAY+F,UAAU,CAACrD,IAAvB,EAA8BD,GAAD,IAAyB;MACpD,IAAI;QAAEW,KAAF;QAASQ,KAAT;QAAgBhE,OAAhB;QAAyBiE;MAAzB,IAAiCpB,GAArC;;MAEA,IAAIW,KAAK,KAAK,SAAV,IAAuBQ,KAAK,KAAK,WAArC,EAAkD;QAChD,KAAKe,iBAAL,CAAuBlC,GAAG,CAAC7C,OAAJ,CAAYmC,MAAZ,IAAsB,IAAtB,GAA6B,IAA7B,GAAoC,OAA3D;MACD;;MAED,IAAI8B,GAAG,IAAIA,GAAG,KAAK,KAAKe,mBAAxB,EAA6C;QAC3C,KAAKA,mBAAL,GAA2B,IAA3B;MACD;;MAED,KAAKrC,GAAL,CACE,SADF,EAEE,GAAG3C,OAAO,CAACmC,MAAR,IAAkB,EAAE,IAAIqB,KAAK,IAAIQ,KAAK,IACtCC,GAAG,IAAI,MAAMA,GAAN,GAAY,GAApB,IAA4B,EAC9B,EAJF,EAKEjE,OALF;MAQA7B,KAAK,CAACiI,IAAN,CAAW,KAAKvE,QAAhB,EACG6D,MADH,CACW3D,OAAD,IAA8BA,OAAO,CAACsE,SAAR,CAAkB7C,KAAlB,CADxC,EAEG1B,OAFH,CAEYC,OAAD,IACPA,OAAO,CAACuE,QAAR,CAAiBtC,KAAjB,EAAwBhE,OAAxB,EAAiCiE,GAAjC,CAHJ;MAMA,KAAKsC,oBAAL,CAA0B/H,OAA1B,CAAkCsD,OAAlC,CAA2C7B,QAAD,IAAcA,QAAQ,CAAC4C,GAAD,CAAhE;IACD,CA1BD;EA2BD;EAED;;;EACQgD,WAAW;IACjB,KAAKlD,GAAL,CAAS,WAAT,EAAsB,gBAAgB,KAAKzB,WAAL,EAAkB,EAAxD;IACA,KAAKiE,eAAL;IACA,KAAK5E,cAAL,CAAoBqB,KAApB;;IACA,IAAI,CAAC,KAAKjB,MAAV,EAAkB;MAChB,KAAK6F,eAAL;IACD,CAFD,MAEO;MACL,IAAI,CAAC,KAAKC,SAAV,EAAqB;QACnB,KAAKC,qBAAL;MACD;IACF;;IAED,KAAKH,oBAAL,CAA0BlI,IAA1B,CAA+ByD,OAA/B,CAAwC7B,QAAD,IAAcA,QAAQ,EAA7D;EACD;EACD;;;EACQuG,eAAe;IACrB,KAAK9E,cAAL,IAAuBC,aAAa,CAAC,KAAKD,cAAN,CAApC;IACA,KAAKA,cAAL,GAAsBiF,WAAW,CAC/B,MAAM,KAAK7B,aAAL,EADyB,EAE/B,KAAKtF,mBAF0B,CAAjC;EAID;EAED;;;EACQkH,qBAAqB;IAC3B,IAAI,KAAK3F,SAAT,EAAoB;MAClB,KAAK4B,GAAL,CAAS,QAAT,EAAmB,4BAA4B,KAAK5B,SAAS,EAA7D;IACD,CAFD,MAEO;MACL,KAAK4B,GAAL,CAAS,QAAT,EAAmB,yBAAnB;IACD;;IACD,MAAMiE,SAAS,GAAG,KAAKC,gBAAL,CAAsB,KAAK9F,SAA3B,CAAlB;;IACA,KAAK0F,SAAL,GAAiB,IAAI5F,MAAJ,CAAW+F,SAAX,CAAjB;;IACA,KAAKH,SAAL,CAAeX,OAAf,GAA0BvH,KAAD,IAAU;MACjC,KAAKoE,GAAL,CAAS,QAAT,EAAmB,cAAnB,EAAoCpE,KAAoB,CAACC,OAAzD;MACA,KAAKiI,SAAL,CAAgBK,SAAhB;IACD,CAHD;;IAIA,KAAKL,SAAL,CAAeT,SAAf,GAA4BhC,KAAD,IAAU;MACnC,IAAIA,KAAK,CAAClB,IAAN,CAAWkB,KAAX,KAAqB,WAAzB,EAAsC;QACpC,KAAKc,aAAL;MACD;IACF,CAJD;;IAKA,KAAK2B,SAAL,CAAeM,WAAf,CAA2B;MACzB/C,KAAK,EAAE,OADkB;MAEzBgD,QAAQ,EAAE,KAAKxH;IAFU,CAA3B;EAID;EACD;;;EACQ0G,YAAY,CAAClC,KAAD,EAAW;IAC7B,KAAKrB,GAAL,CAAS,WAAT,EAAsB,OAAtB,EAA+BqB,KAA/B;;IACA,KAAKiD,iBAAL;;IACA,KAAKvF,cAAL,IAAuBC,aAAa,CAAC,KAAKD,cAAN,CAApC;IACA,KAAKnB,cAAL,CAAoB2G,eAApB;IACA,KAAKX,oBAAL,CAA0BjI,KAA1B,CAAgCwD,OAAhC,CAAyC7B,QAAD,IAAcA,QAAQ,CAAC+D,KAAD,CAA9D;EACD;EAED;;;EACQ+B,YAAY,CAACxH,KAAD,EAAa;IAC/B,KAAKoE,GAAL,CAAS,WAAT,EAAsB,GAAGpE,KAAK,EAA9B;;IACA,KAAK0I,iBAAL;;IACA,KAAKV,oBAAL,CAA0BhI,KAA1B,CAAgCuD,OAAhC,CAAyC7B,QAAD,IAAcA,QAAQ,CAAC1B,KAAD,CAA9D;EACD;EAED;;;EACQ0I,iBAAiB;IACvB,KAAKpF,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IACpBA,OAAO,CAACuE,QAAR,CAAiBrJ,cAAc,CAACsB,KAAhC,CADF;EAGD;EAED;;;EACQ6C,aAAa,CACnB+F,GADmB,EAEnBjI,MAFmB,EAEc;IAEjC,IAAIK,MAAM,CAAC6H,IAAP,CAAYlI,MAAZ,EAAoBmD,MAApB,KAA+B,CAAnC,EAAsC;MACpC,OAAO8E,GAAP;IACD;;IACD,MAAME,MAAM,GAAGF,GAAG,CAACG,KAAJ,CAAU,IAAV,IAAkB,GAAlB,GAAwB,GAAvC;IACA,MAAMC,KAAK,GAAG,IAAIC,eAAJ,CAAoBtI,MAApB,CAAd;IACA,OAAO,GAAGiI,GAAG,GAAGE,MAAM,GAAGE,KAAK,EAA9B;EACD;;EAEOV,gBAAgB,CAACM,GAAD,EAAwB;IAC9C,IAAIM,UAAJ;;IACA,IAAIN,GAAJ,EAAS;MACPM,UAAU,GAAGN,GAAb;IACD,CAFD,MAEO;MACL,MAAMO,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC7J,aAAD,CAAT,EAA0B;QAAE8J,IAAI,EAAE;MAAR,CAA1B,CAAb;MACAH,UAAU,GAAGI,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAb;IACD;;IACD,OAAOD,UAAP;EACD;;AAliBgC","names":["WebSocket","CHANNEL_EVENTS","CONNECTION_STATE","DEFAULT_VERSION","DEFAULT_TIMEOUT","SOCKET_STATES","TRANSPORTS","VSN","WS_CLOSE_NORMAL","Serializer","Timer","httpEndpointURL","RealtimeChannel","noop","WORKER_SCRIPT","RealtimeClient","constructor","endPoint","options","Array","undefined","open","close","error","message","customFetch","_fetch","fetch","args","then","default","websocket","httpEndpoint","transport","params","timeout","logger","logLevel","log_level","Object","heartbeatIntervalMs","accessTokenValue","_a","apikey","apiKey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","disconnect","connect","_resolveFetch","worker","window","Worker","Error","workerUrl","accessToken","conn","endpointURL","setupConnection","_appendParams","assign","vsn","code","reason","onclose","heartbeatTimer","clearInterval","reset","channels","forEach","channel","teardown","getChannels","removeChannel","status","unsubscribe","length","removeAllChannels","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","realtimeTopic","exists","find","c","chan","push","event","ref","result","send","sendBuffer","setAuth","token","tokenToSend","access_token","version","updateJoinPayload","joinedOnce","_isJoined","_push","sendHeartbeat","heartbeatCallback","pendingHeartbeatRef","_makeRef","onHeartbeat","flushSendBuffer","newRef","toString","_leaveOpenTopic","dupChannel","_isJoining","_remove","filter","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","_onConnClose","rawMessage","from","_isMember","_trigger","stateChangeCallbacks","_startHeartbeat","workerRef","_startWorkerHeartbeat","setInterval","objectUrl","_workerObjectUrl","terminate","postMessage","interval","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","result_url","blob","Blob","type","URL","createObjectURL"],"sources":["/Users/johann/node_modules/@supabase/realtime-js/src/RealtimeClient.ts"],"sourcesContent":["import { WebSocket } from 'isows'\n\nimport {\n  CHANNEL_EVENTS,\n  CONNECTION_STATE,\n  DEFAULT_VERSION,\n  DEFAULT_TIMEOUT,\n  SOCKET_STATES,\n  TRANSPORTS,\n  VSN,\n  WS_CLOSE_NORMAL,\n} from './lib/constants'\n\nimport Serializer from './lib/serializer'\nimport Timer from './lib/timer'\n\nimport { httpEndpointURL } from './lib/transformers'\nimport RealtimeChannel from './RealtimeChannel'\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\n\ntype Fetch = typeof fetch\n\nexport type Channel = {\n  name: string\n  inserted_at: string\n  updated_at: string\n  id: number\n}\nexport type LogLevel = 'info' | 'warn' | 'error'\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\nexport type HeartbeatStatus =\n  | 'sent'\n  | 'ok'\n  | 'error'\n  | 'timeout'\n  | 'disconnected'\n\nconst noop = () => {}\n\nexport interface WebSocketLikeConstructor {\n  new (\n    address: string | URL,\n    subprotocols?: string | string[] | undefined\n  ): WebSocketLike\n}\n\nexport type WebSocketLike = WebSocket\n\nexport interface WebSocketLikeError {\n  error: any\n  message: string\n  type: string\n}\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocketLikeConstructor\n  timeout?: number\n  heartbeatIntervalMs?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n  //Deprecated: Use it in favour of correct casing `logLevel`\n  log_level?: LogLevel\n  logLevel?: LogLevel\n  fetch?: Fetch\n  worker?: boolean\n  workerUrl?: string\n  accessToken?: () => Promise<string | null>\n}\n\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`\n\nexport default class RealtimeClient {\n  accessTokenValue: string | null = null\n  apiKey: string | null = null\n  channels: RealtimeChannel[] = new Array()\n  endPoint: string = ''\n  httpEndpoint: string = ''\n  /** @deprecated headers cannot be set on websocket connections */\n  headers?: { [key: string]: string } = {}\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: WebSocketLikeConstructor | null\n  heartbeatIntervalMs: number = 25000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  heartbeatCallback: (status: HeartbeatStatus) => void = noop\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  logLevel?: LogLevel\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocketLike | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  fetch: Fetch\n  accessToken: (() => Promise<string | null>) | null = null\n  worker?: boolean\n  workerUrl?: string\n  workerRef?: Worker\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.logLevel Sets the log level for Realtime\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n    this.httpEndpoint = httpEndpointURL(endPoint)\n    if (options?.transport) {\n      this.transport = options.transport\n    } else {\n      this.transport = null\n    }\n    if (options?.params) this.params = options.params\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.logLevel || options?.log_level) {\n      this.logLevel = options.logLevel || options.log_level\n      this.params = { ...this.params, log_level: this.logLevel as string }\n    }\n\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n\n    const accessTokenValue = options?.params?.apikey\n    if (accessTokenValue) {\n      this.accessTokenValue = accessTokenValue\n      this.apiKey = accessTokenValue\n    }\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n\n    this.fetch = this._resolveFetch(options?.fetch)\n    if (options?.worker) {\n      if (typeof window !== 'undefined' && !window.Worker) {\n        throw new Error('Web Worker is not supported')\n      }\n      this.worker = options?.worker || false\n      this.workerUrl = options?.workerUrl\n    }\n    this.accessToken = options?.accessToken || null\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n    if (!this.transport) {\n      this.transport = WebSocket\n    }\n    if (!this.transport) {\n      throw new Error('No transport provided')\n    }\n    this.conn = new this.transport(this.endpointURL()) as WebSocketLike\n    this.setupConnection()\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   * @returns string The URL of the websocket.\n   */\n  endpointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {} // noop\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n      this.conn = null\n\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n      this.reconnectTimer.reset()\n      this.channels.forEach((channel) => channel.teardown())\n    }\n  }\n\n  /**\n   * Returns all created channels\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(\n    channel: RealtimeChannel\n  ): Promise<RealtimeRemoveChannelResponse> {\n    const status = await channel.unsubscribe()\n\n    if (this.channels.length === 0) {\n      this.disconnect()\n    }\n\n    return status\n  }\n\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    const values_1 = await Promise.all(\n      this.channels.map((channel) => channel.unsubscribe())\n    )\n    this.channels = []\n    this.disconnect()\n    return values_1\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  channel(\n    topic: string,\n    params: RealtimeChannelOptions = { config: {} }\n  ): RealtimeChannel {\n    const realtimeTopic = `realtime:${topic}`\n    const exists = this.getChannels().find(\n      (c: RealtimeChannel) => c.topic === realtimeTopic\n    )\n\n    if (!exists) {\n      const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n      this.channels.push(chan)\n\n      return chan\n    } else {\n      return exists\n    }\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): void {\n    const { topic, event, payload, ref } = data\n    const callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      callback()\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * If param is null it will use the `accessToken` callback function or the token set on the client.\n   *\n   * On callback used, it will set the value of the token internal to the client.\n   *\n   * @param token A JWT string to override the token set on the client.\n   */\n  async setAuth(token: string | null = null): Promise<void> {\n    let tokenToSend =\n      token ||\n      (this.accessToken && (await this.accessToken())) ||\n      this.accessTokenValue\n\n    if (this.accessTokenValue != tokenToSend) {\n      this.accessTokenValue = tokenToSend\n      this.channels.forEach((channel) => {\n        const payload = {\n          access_token: tokenToSend,\n          version: DEFAULT_VERSION,\n        }\n\n        tokenToSend && channel.updateJoinPayload(payload)\n\n        if (channel.joinedOnce && channel._isJoined()) {\n          channel._push(CHANNEL_EVENTS.access_token, {\n            access_token: tokenToSend,\n          })\n        }\n      })\n    }\n  }\n  /**\n   * Sends a heartbeat message if the socket is connected.\n   */\n  async sendHeartbeat() {\n    if (!this.isConnected()) {\n      this.heartbeatCallback('disconnected')\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.heartbeatCallback('timeout')\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.heartbeatCallback('sent')\n    await this.setAuth()\n  }\n\n  onHeartbeat(callback: (status: HeartbeatStatus) => void): void {\n    this.heartbeatCallback = callback\n  }\n  /**\n   * Flushes send buffer\n   */\n  flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n\n  /**\n   * Use either custom fetch, if provided, or default fetch to make HTTP requests\n   *\n   * @internal\n   */\n  _resolveFetch = (customFetch?: Fetch): Fetch => {\n    let _fetch: Fetch\n    if (customFetch) {\n      _fetch = customFetch\n    } else if (typeof fetch === 'undefined') {\n      _fetch = (...args) =>\n        import('@supabase/node-fetch' as any).then(({ default: fetch }) =>\n          fetch(...args)\n        )\n    } else {\n      _fetch = fetch\n    }\n    return (...args) => _fetch(...args)\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter((c) => c.topic !== channel.topic)\n  }\n\n  /**\n   * Sets up connection handlers.\n   *\n   * @internal\n   */\n  private setupConnection(): void {\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error: Event) => this._onConnError(error)\n      this.conn.onmessage = (event: any) => this._onConnMessage(event)\n      this.conn.onclose = (event: any) => this._onConnClose(event)\n    }\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      let { topic, event, payload, ref } = msg\n\n      if (topic === 'phoenix' && event === 'phx_reply') {\n        this.heartbeatCallback(msg.payload.status == 'ok' ? 'ok' : 'error')\n      }\n\n      if (ref && ref === this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n\n      Array.from(this.channels)\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) =>\n          channel._trigger(event, payload, ref)\n        )\n\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this.endpointURL()}`)\n    this.flushSendBuffer()\n    this.reconnectTimer.reset()\n    if (!this.worker) {\n      this._startHeartbeat()\n    } else {\n      if (!this.workerRef) {\n        this._startWorkerHeartbeat()\n      }\n    }\n\n    this.stateChangeCallbacks.open.forEach((callback) => callback())\n  }\n  /** @internal */\n  private _startHeartbeat() {\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this.sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n  }\n\n  /** @internal */\n  private _startWorkerHeartbeat() {\n    if (this.workerUrl) {\n      this.log('worker', `starting worker for from ${this.workerUrl}`)\n    } else {\n      this.log('worker', `starting default worker`)\n    }\n    const objectUrl = this._workerObjectUrl(this.workerUrl!)\n    this.workerRef = new Worker(objectUrl)\n    this.workerRef.onerror = (error) => {\n      this.log('worker', 'worker error', (error as ErrorEvent).message)\n      this.workerRef!.terminate()\n    }\n    this.workerRef.onmessage = (event) => {\n      if (event.data.event === 'keepAlive') {\n        this.sendHeartbeat()\n      }\n    }\n    this.workerRef.postMessage({\n      event: 'start',\n      interval: this.heartbeatIntervalMs,\n    })\n  }\n  /** @internal */\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  /** @internal */\n  private _onConnError(error: Event) {\n    this.log('transport', `${error}`)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) =>\n      channel._trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  /** @internal */\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n    return `${url}${prefix}${query}`\n  }\n\n  private _workerObjectUrl(url: string | undefined): string {\n    let result_url: string\n    if (url) {\n      result_url = url\n    } else {\n      const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' })\n      result_url = URL.createObjectURL(blob)\n    }\n    return result_url\n  }\n}\n"]},"metadata":{},"sourceType":"module"}