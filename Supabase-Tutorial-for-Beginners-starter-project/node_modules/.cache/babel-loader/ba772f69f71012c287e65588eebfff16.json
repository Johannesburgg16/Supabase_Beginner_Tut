{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fetch = arguments.length > 2 ? arguments[2] : undefined;\n    let opts = arguments.length > 3 ? arguments[3] : undefined;\n    const baseUrl = new URL(url); // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\n    // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\n\n    if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {\n      const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname);\n\n      if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\n        baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.');\n      }\n    }\n\n    this.url = baseUrl.href;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   * @returns newly created bucket id\n   * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\n   *   - default bucket type is `STANDARD`\n   */\n\n\n  createBucket(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      public: false\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          type: options.type,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","isStorageError","get","post","put","remove","resolveFetch","StorageBucketApi","constructor","url","headers","fetch","opts","baseUrl","URL","useNewHostname","isSupabaseHost","test","hostname","includes","replace","href","Object","listBuckets","data","error","getBucket","id","createBucket","options","public","name","type","file_size_limit","fileSizeLimit","allowed_mime_types","allowedMimeTypes","updateBucket","emptyBucket","deleteBucket"],"sources":["/Users/johann/node_modules/@supabase/storage-js/src/packages/StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\nimport { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { Bucket, BucketType } from '../lib/types'\nimport { StorageClientOptions } from '../StorageClient'\n\nexport default class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    fetch?: Fetch,\n    opts?: StorageClientOptions\n  ) {\n    const baseUrl = new URL(url)\n\n    // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\n    // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\n    if (opts?.useNewHostname) {\n      const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname)\n      if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\n        baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.')\n      }\n    }\n\n    this.url = baseUrl.href\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<\n    | {\n        data: Bucket[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(\n    id: string\n  ): Promise<\n    | {\n        data: Bucket\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   * @returns newly created bucket id\n   * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\n   *   - default bucket type is `STANDARD`\n   */\n  async createBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n      type?: BucketType\n    } = {\n      public: false,\n    }\n  ): Promise<\n    | {\n        data: Pick<Bucket, 'name'>\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        {\n          id,\n          name: id,\n          type: options.type,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   */\n  async updateBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    }\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}